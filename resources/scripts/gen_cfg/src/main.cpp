/**
 * @file main.cpp
 * @brief Implementation main method
 * @author $Author:$ Holanda, Gabriel Bandeira
 * @version $Revision:$
 * @date $Date:$ 21/03/2019
 */

// System Heders
#include <string>
#include <vector>
#include <iostream>
#include <fstream>

using namespace std;

void write_data(int classes, string method){
  FILE* fp = fopen( string("../../data/" + method + ".data").c_str(),"w");
  fprintf(fp, "classes=%d\n",classes);
  fprintf(fp, "train  = resources/data/train.list\n");
  fprintf(fp, "valid  = resources/data/test.list\n");
  fprintf(fp, "labels = resources/data/labels.txt\n");
  fprintf(fp, "backup = backup/\n");
  fprintf(fp, "top=2\n");
}
void write_alexnet(int classes, int height, int width){
  write_data(classes, "alexnet");
  FILE* fp = fopen("../../data/alexnet.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "batch=128\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "# batch=1\n");
  fprintf(fp, "# subdivisions=1\n");
  fprintf(fp, "height=%d\n",height);
  fprintf(fp, "width=%d\n",width);
  fprintf(fp, "channels=3\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "max_crop=256\n");
  fprintf(fp, "\n");
  fprintf(fp, "learning_rate=0.01\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=%d\n", classes*4000);
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue = .1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=96\n");
  fprintf(fp, "size=11\n");
  fprintf(fp, "stride=4\n");
  fprintf(fp, "pad=0\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "padding=0\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=5\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "padding=0\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=384\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=384\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "padding=0\n");
  fprintf(fp, "\n");
  fprintf(fp, "[connected]\n");
  fprintf(fp, "output=4096\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[dropout]\n");
  fprintf(fp, "probability=.5\n");
  fprintf(fp, "\n");
  fprintf(fp, "[connected]\n");
  fprintf(fp, "output=4096\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[dropout]\n");
  fprintf(fp, "probability=.5\n");
  fprintf(fp, "\n");
  fprintf(fp, "[connected]\n");
  fprintf(fp, "output=%d\n",classes);
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_darknet53_448(int classes, int height, int width){
  FILE* fp = fopen("../../data/darknet53_448.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training - start training with darknet53.weights\n");
  fprintf(fp, "batch=128\n");
  fprintf(fp, "subdivisions=8\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "# batch=1\n");
  fprintf(fp, "# subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=%d\n",height);
  fprintf(fp, "width=%d\n" ,width);
  fprintf(fp, "channels=3\n");
  fprintf(fp, "min_crop=%d\n",height);
  fprintf(fp, "max_crop=512\n");
  fprintf(fp, "\n");
  fprintf(fp, "learning_rate=0.001\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=%d\n", classes*8000);
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Downsample\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Downsample\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Downsample\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Downsample\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Downsample\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=%d\n",classes);
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_vgg_16(int classes, int height, int width){
  write_data(classes, "vgg-16");
  FILE* fp = fopen("../../data/vgg-16.cfg","w");

  fprintf(fp, "[net]\n");
  fprintf(fp, "#Training\n");
  fprintf(fp, "batch=128\n");
  fprintf(fp, "subdivisions=4\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "# batch=1\n");
  fprintf(fp, "# subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "learning_rate=0.00001\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "[crop]\n");
  fprintf(fp, "crop_height=224\n");
  fprintf(fp, "crop_width=224\n");
  fprintf(fp, "flip=1\n");
  fprintf(fp, "exposure=1\n");
  fprintf(fp, "saturation=1\n");
  fprintf(fp, "angle=0\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[connected]\n");
  fprintf(fp, "output=4096\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[dropout]\n");
  fprintf(fp, "probability=.5\n");
  fprintf(fp, "\n");
  fprintf(fp, "[connected]\n");
  fprintf(fp, "output=4096\n");
  fprintf(fp, "activation=relu\n");
  fprintf(fp, "\n");
  fprintf(fp, "[dropout]\n");
  fprintf(fp, "probability=.5\n");
  fprintf(fp, "\n");
  fprintf(fp, "[connected]\n");
  fprintf(fp, "output=%d\n",classes);
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fclose(fp);
}

void write_darknet(){
  FILE* fp = fopen("darknet.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=1\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "min_crop=128\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=800000\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=16\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_darknet19(int classes){
  FILE* fp = fopen("../../cfg/darknet19.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "batch=128\n");
  fprintf(fp, "subdivisions=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "# batch=1\n");
  fprintf(fp, "# subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "min_crop=128\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=%d\n",classes*2000);
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=%d\n",classes);
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_darknet19_448(){
  FILE* fp = fopen("darknet19_448.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "batch=128\n");
  fprintf(fp, "subdivisions=4\n");
  fprintf(fp, "height=448\n");
  fprintf(fp, "width=448\n");
  fprintf(fp, "max_crop=512\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "learning_rate=0.001\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=100000\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue = .1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_darknet53(){
  FILE* fp = fopen("darknet53.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=4\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "min_crop=128\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=800000\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Downsample\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Downsample\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Downsample\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Downsample\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Downsample\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_densenet201(){
  FILE* fp = fopen("densenet201.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=4\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=1600000\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=7\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=32\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[route]\n");
  fprintf(fp, "layers=-1,-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_extraction(){
  FILE* fp = fopen("extraction.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=4\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=224\n");
  fprintf(fp, "width=224\n");
  fprintf(fp, "max_crop=320\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=1600000\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=7\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=192\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_resnet18(){
  FILE* fp = fopen("resnet18.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "min_crop=128\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=800000\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=7\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Strided Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Strided Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Strided Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_resnet34(){
  FILE* fp = fopen("resnet34.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "min_crop=128\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=800000\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=7\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Strided Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Strided Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Residual Block\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "from=-3\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_resnet50(){
  FILE* fp = fopen("resnet50.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=4\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "min_crop=128\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=800000\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=7\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Conv 4\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "#Conv 5\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_resnet101(){
  FILE* fp = fopen("resnet101.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "min_crop=128\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=800000\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=7\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Conv 4\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "#Conv 5\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "[cost]\n");
  fprintf(fp, "type=sse\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_resnet152(){
  FILE* fp = fopen("resnet152.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=8\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=1600000\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=7\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Conv 4\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "#Conv 5\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_resnext50(){
  FILE* fp = fopen("resnext50.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=4\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "min_crop=128\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=800000\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=7\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Conv 4\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "#Conv 5\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "groups=32\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_resnext101_32x4d(){
  FILE* fp = fopen("resnext101-32x4d.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=8\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "min_crop=128\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=800000\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=7\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=4096\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=4096\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=4096\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}
void write_resnext152_32x4d(){
  FILE* fp = fopen("resnext152-32x4d.cfg","w");
  fprintf(fp, "[net]\n");
  fprintf(fp, "# Training\n");
  fprintf(fp, "# batch=128\n");
  fprintf(fp, "# subdivisions=16\n");
  fprintf(fp, "\n");
  fprintf(fp, "# Testing\n");
  fprintf(fp, "batch=1\n");
  fprintf(fp, "subdivisions=1\n");
  fprintf(fp, "\n");
  fprintf(fp, "height=256\n");
  fprintf(fp, "width=256\n");
  fprintf(fp, "channels=3\n");
  fprintf(fp, "min_crop=128\n");
  fprintf(fp, "max_crop=448\n");
  fprintf(fp, "\n");
  fprintf(fp, "burn_in=1000\n");
  fprintf(fp, "learning_rate=0.1\n");
  fprintf(fp, "policy=poly\n");
  fprintf(fp, "power=4\n");
  fprintf(fp, "max_batches=800000\n");
  fprintf(fp, "momentum=0.9\n");
  fprintf(fp, "decay=0.0005\n");
  fprintf(fp, "\n");
  fprintf(fp, "angle=7\n");
  fprintf(fp, "hue=.1\n");
  fprintf(fp, "saturation=.75\n");
  fprintf(fp, "exposure=.75\n");
  fprintf(fp, "aspect=.75\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=7\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[maxpool]\n");
  fprintf(fp, "size=2\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=64\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=128\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=1024\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=256\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=2048\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=2\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=4096\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=4096\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "groups = 32\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=512\n");
  fprintf(fp, "size=3\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "batch_normalize=1\n");
  fprintf(fp, "filters=4096\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[shortcut]\n");
  fprintf(fp, "from=-4\n");
  fprintf(fp, "activation=leaky\n");
  fprintf(fp, "\n");
  fprintf(fp, "    \n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "[avgpool]\n");
  fprintf(fp, "\n");
  fprintf(fp, "[convolutional]\n");
  fprintf(fp, "filters=1000\n");
  fprintf(fp, "size=1\n");
  fprintf(fp, "stride=1\n");
  fprintf(fp, "pad=1\n");
  fprintf(fp, "activation=linear\n");
  fprintf(fp, "\n");
  fprintf(fp, "[softmax]\n");
  fprintf(fp, "groups=1\n");
  fprintf(fp, "\n");
  fclose(fp);
}

int main(int argc, char** argv){

  if(argc<2){
    cout << "\n methods: genCFG, genCode is accepted !\n" << endl;
    return -1;
  }

  string arg(argv[1]);
  if(arg=="genCode"){

    if(argc!=4){
      cout<<"./CFG genCode <InputCFG> <MethodName>"<<endl;
  	  cout<<"example: ./CFG genCode alexnet.cfg alexnet"<<endl;
  	  return -1;
    }

    string str;
    ifstream file(argv[2]);
    string name(argv[3]);
    FILE* fp = fopen( "Code.txt", "a");
    fprintf(fp, "void write_%s(){ \n", name.c_str());
    fprintf(fp, "FILE* fp = fopen(\"%s.cfg\",\"w\");\n", name.c_str());
    while(getline(file, str)){
      fprintf(fp, "fprintf(fp, \"%s\\n\");\n", str.c_str());
    }
    fprintf(fp, "fclose(fp);\n");
    fprintf(fp, "}");
    fclose(fp);
  }
  else if(arg=="genCFG"){

    if(argc!=5){
      cout<<"./CFG genCFG <Nclass> <height> <width>"<<endl;
  	  cout<<"example: ./CFG genCFG 2 128 128"<<endl;
  	  return -1;
    }

    int classes = atoi(argv[2]);
    int height  = atoi(argv[3]);
    int width   = atoi(argv[4]);
    write_vgg_16(classes, height, width);
    //write_alexnet(classes, height, width);
    //write_darknet53_448(classes, height, width);
    //write_darknet19(classes);
    //write_darknet53_448(classes);
    //write_darknet();
    //write_darknet19();
    //write_darknet19_448();
    //write_darknet53();
    //write_darknet53_448();
    //write_densenet201();
    //write_extraction();
    //write_resnet18();
    //write_resnet34();
    //write_resnet50();
    //write_resnet101();
    //write_resnet152();
    //write_resnext50();
    //write_resnext101_32x4d();
    //write_resnext152_32x4d();
    //write_vgg_16();
  }
  else{
    cout << "\n methods: genCFG, genCode is accepted !\n" << endl;
  }

  return 0;
}
